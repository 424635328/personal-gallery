# .github/workflows/auto-dependabot.yml

# ========================================================================================
# Dependabot Observatory: 全自动 Dependabot PR 处理工作流
# ========================================================================================
#
# 这是一个高级工作流，用于全自动管理 Dependabot 提交的拉取请求（PR）。
# 它扮演着“天文台”（Observatory）的角色，在所有CI检查完成后，智能地决定是
# 自动合并、请求人工审查还是关闭PR。
#
# 核心特性：
#   - 避免竞态条件：使用 `check_suite` 触发器，确保在所有检查完成后才运行。
#   - 遵守分支保护：严格核对分支保护规则中定义的所有必需检查项。
#   - 智能决策：
#     - 自动合并：所有检查通过且为非重大版本更新（patch, minor）。
#     - 请求审查：所有检查通过但为重大版本更新（major）。
#     - 自动关闭：任何必需的检查失败。
#   - 健壮性设计：包含严格模式（set -euo pipefail）和清晰的日志输出。
#
name: Dependabot Observatory

# ----------------------------------------------------------------------------------------
# 触发器（Trigger）
# ----------------------------------------------------------------------------------------
# 使用 `check_suite` 的 `completed` 事件作为触发器。
# 这样做是为了解决一个常见的竞态条件问题：如果使用 `pull_request` 触发器，
# 本工作流可能会在其他必需的CI检查（如测试、构建）完成之前就开始执行，
# 从而导致对检查状态的错误判断。
# `check_suite: completed` 保证了此工作流只在与提交关联的所有检查都结束后才启动。
on:
  check_suite:
    types:
      - completed

# ----------------------------------------------------------------------------------------
# 并发控制（Concurrency）
# ----------------------------------------------------------------------------------------
# 为每个 PR 设置独立的并发组，以防止对同一个 PR 同时运行多个工作流实例。
# - group: 基于仓库和 PR 编号创建唯一分组键。
#   `github.event.check_suite.pull_requests[0].number` 从 check_suite 事件中安全地获取 PR 编号。
# - cancel-in-progress: 如果一个新的工作流实例（例如，由于新的提交）在同一个组中启动，
#   会自动取消当前正在运行的实例，确保总是处理最新的状态。
concurrency:
  group: ${{ github.repository }}-${{ github.event.check_suite.pull_requests[0].number }}-observatory
  cancel-in-progress: true

jobs:
  handle_dependabot_pr:
    # ------------------------------------------------------------------------------------
    # 作业执行条件（Job Condition）
    # ------------------------------------------------------------------------------------
    # 此作业仅在以下两个条件都满足时运行：
    # 1. `github.actor == 'dependabot[bot]'`: 确保事件是由 Dependabot 触发的。
    # 2. `github.event.check_suite.pull_requests[0]`: 确保该 check_suite 事件确实与一个 PR 关联。
    #    （某些 check_suite 可能与独立的提交相关，而没有关联的 PR）。
    if: >
      github.actor == 'dependabot[bot]' &&
      github.event.check_suite.pull_requests[0]
    runs-on: ubuntu-latest
    
    # ------------------------------------------------------------------------------------
    # 权限（Permissions）
    # ------------------------------------------------------------------------------------
    # 为作业授予完成其任务所需的最小权限。
    permissions:
      pull-requests: write # 允许评论、合并和关闭 PR。
      contents: write      # 允许合并 PR (因为合并操作会写入 base 分支)。

    steps:
      - name: "Checkout: 克隆代码仓库"
        uses: actions/checkout@v5

      - name: "Setup: 校验依赖工具"
        run: |
          # 启用 Shell 的严格模式，确保脚本在出错时立即失败。
          # -e: 如果命令返回非零退出码，则立即退出。
          # -u: 将未设置的变量视为错误。
          # -o pipefail: 如果管道中的任何命令失败，则整个管道的退出码为非零。
          set -euo pipefail
          echo "正在检查所需工具（gh, jq）..."
          gh --version
          jq --version
          echo "✅ 所有依赖工具均可用。"

      - name: "Step 1: 提取 PR 关键信息"
        id: pr-info
        # 从 check_suite 事件负载中提取 PR 编号和头部提交 SHA。
        # 由于事件中不包含 base 分支信息，需要使用 GitHub CLI 额外查询。
        run: |
          set -euo pipefail
          echo "🔍 从 check_suite 事件中提取 PR 信息..."

          PR_NUMBER="${{ github.event.check_suite.pull_requests[0].number }}"
          PR_HEAD_SHA="${{ github.event.check_suite.head_sha }}"
          
          if [ -z "$PR_NUMBER" ] || [ -z "$PR_HEAD_SHA" ]; then
            echo "❌ 错误：无法从事件中找到关联的 PR 编号或头部提交 SHA。"
            exit 1
          fi
          echo "PR 编号: $PR_NUMBER"
          echo "PR 头部提交 SHA: $PR_HEAD_SHA"
          
          echo "正在使用 GitHub CLI 获取 base 分支名称..."
          BASE_BRANCH=$(gh pr view "$PR_NUMBER" --json baseRefName --jq '.baseRefName')
          echo "Base 分支: $BASE_BRANCH"

          # 将提取的信息设置为后续步骤可用的输出变量。
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "pr_head_sha=$PR_HEAD_SHA" >> $GITHUB_OUTPUT
          echo "base_branch=$BASE_BRANCH" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "Step 2: Observatory - 检查分支保护规则"
        id: observatory
        # 这是工作流的核心，即“天文台”步骤。它模拟一个“守门员”，确保 PR 满足所有分支保护要求。
        # 逻辑如下：
        # 1. 获取目标 base 分支上设置的所有“必需状态检查” (required status checks)。
        # 2. 如果没有设置必需检查，则默认视为通过。
        # 3. 获取当前 PR 头部提交上的所有实际检查运行 (check-runs) 及其最终结论。
        # 4. 遍历每一个“必需检查”，验证其在“实际检查”中的结论是否为 'success'。
        #    - 因为此工作流由 `check_suite: completed` 触发，所以检查状态不应为 'pending'。
        run: |
          set -euo pipefail
          echo "🔭 [Observatory] 正在观测 PR #${{ steps.pr-info.outputs.pr_number }} (目标分支: '${{ steps.pr-info.outputs.base_branch }}')..."
          
          echo "获取分支保护规则中的必需检查项..."
          # 如果API调用失败（例如，分支没有保护规则），则默认为空数组 "[]"。
          REQUIRED_CHECKS_JSON=$(gh api "repos/${{ github.repository }}/branches/${{ steps.pr-info.outputs.base_branch }}/protection" --jq '.required_status_checks.contexts' 2>/dev/null || echo "[]")
          
          if [[ "$(echo "$REQUIRED_CHECKS_JSON" | jq 'if type=="array" and length==0 then "empty" else "ok" end')" == '"empty"' ]]; then
            echo "✅ 分支保护规则中未发现必需的状态检查。默认通过。"
            echo "observatory_passed=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          REQUIRED_CHECKS=$(echo "$REQUIRED_CHECKS_JSON" | jq -r '.[]')
          echo "分支保护规则要求的检查项:"
          echo "$REQUIRED_CHECKS"

          echo "获取提交 (${{ steps.pr-info.outputs.pr_head_sha }}) 上的实际检查运行结果..."
          ALL_CHECKS_JSON=$(gh api "repos/${{ github.repository }}/commits/${{ steps.pr-info.outputs.pr_head_sha }}/check-runs" --jq '.check_runs')
          echo "在该提交上发现的实际检查项及其结论:"
          echo "$ALL_CHECKS_JSON" | jq '.[] | {name: .name, conclusion: .conclusion}'

          ALL_PASS=true
          while IFS= read -r CHECK_NAME; do
            # 对于每个必需的检查，从所有实际运行的检查中找到其最终结论。
            # `tail -n 1` 用于处理同一检查可能被多次运行（如重试）的情况，确保取最新结果。
            CONCLUSION=$(echo "$ALL_CHECKS_JSON" | jq -r --arg name "$CHECK_NAME" '(.[] | select(.name == $name)) | .conclusion' | tail -n 1)
            
            if [[ "$CONCLUSION" == "success" ]]; then
              echo "✅ 通过: 必需检查 '$CHECK_NAME' 已成功。"
            else
              echo "❌ 失败: 必需检查 '$CHECK_NAME' 未通过。状态: '${CONCLUSION:-Not Found}'."
              ALL_PASS=false
            fi
          done <<< "$REQUIRED_CHECKS"
          
          if $ALL_PASS; then
            echo "最终结论: 所有必需检查均已通过。"
            echo "observatory_passed=true" >> $GITHUB_OUTPUT
          else
            echo "最终结论: 一个或多个必需检查失败。"
            echo "observatory_passed=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: "Step 3: 获取 Dependabot 元数据"
        # 仅在所有检查通过时才需要获取更新类型。
        if: steps.observatory.outputs.observatory_passed == 'true'
        id: dependabot-metadata
        uses: dependabot/fetch-metadata@v2.2.0
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"

      - name: "Step 4: [场景] 检查通过，非重大更新 -> 自动合并"
        # 条件：天文台检查通过，且依赖更新类型不是 semver-major。
        if: >
          steps.observatory.outputs.observatory_passed == 'true' &&
          steps.dependabot-metadata.outputs.update-type != 'version-update:semver-major'
        run: |
          set -euo pipefail
          echo "✅ 所有检查已通过，且为非重大更新（${{ steps.dependabot-metadata.outputs.update-type }}）。"
          echo "正在为 PR #${{ steps.pr-info.outputs.pr_number }} 启用自动合并..."
          gh pr merge "${{ steps.pr-info.outputs.pr_number }}" --auto --squash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: "Step 5: [场景] 检查通过，但为重大更新 -> 请求人工审查"
        # 条件：天文台检查通过，但依赖更新类型是 semver-major。
        if: >
          steps.observatory.outputs.observatory_passed == 'true' &&
          steps.dependabot-metadata.outputs.update-type == 'version-update:semver-major'
        run: |
          set -euo pipefail
          echo "⚠️ 所有检查已通过，但这是一个重大版本更新。"
          echo "正在 PR #${{ steps.pr-info.outputs.pr_number }} 中添加评论，请求人工审查。"
          gh pr comment "${{ steps.pr-info.outputs.pr_number }}" --body "✅ **天文台报告：** 所有必需的分支保护检查均已通过。

          但这是一个 **重大版本更新** (major version update)，可能包含不兼容的变更，需要人工审查和批准后才能合并。"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "Step 6: [场景] 检查失败 -> 自动关闭"
        # 条件：天文台检查未通过。
        if: steps.observatory.outputs.observatory_passed == 'false'
        run: |
          set -euo pipefail
          echo "❌ 一个或多个必需检查失败。"
          echo "正在关闭 PR #${{ steps.pr-info.outputs.pr_number }} 并发表评论..."
          WORKFLOW_URL="https://github.com/${{ github.repository }}/pull/${{ steps.pr-info.outputs.pr_number }}/checks"
          COMMENT_BODY="🚨 **天文台报告：** 一个或多个必需的分支保护检查失败。此 PR 将被自动关闭。

          请访问以下链接审查失败的检查项：
          **[查看所有 PR 检查](${WORKFLOW_URL})**"
          gh pr comment "${{ steps.pr-info.outputs.pr_number }}" --body "$COMMENT_BODY"
          gh pr close "${{ steps.pr-info.outputs.pr_number }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}