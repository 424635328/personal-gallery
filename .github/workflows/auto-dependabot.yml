# .github/workflows/auto-dependabot.yml
# “天文台”模式终极工作流，用于全自动处理 Dependabot PR。
# 经过健壮性优化，包含严格模式、依赖检查和详细日志。

name: Dependabot Observatory

on:
  workflow_run:
    workflows: ["Universal Diagnostic CI"]
    types:
      - completed

# <-- 添加并发控制，防止竞态条件 -->
concurrency:
  group: ${{ github.repository }}-${{ github.event.workflow_run.pull_requests[0].number }}-observatory
  cancel-in-progress: true

jobs:
  handle_dependabot_pr:
    # 确保是由 dependabot 触发，并且确实关联了一个 PR
    if: >
      github.event.workflow_run.actor.login == 'dependabot[bot]' &&
      github.event.workflow_run.pull_requests[0]
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: write
      checks: read

    steps:
      - name: "Checkout: Clone repository"
        uses: actions/checkout@v4

      - name: "Setup: Verify Dependencies"
        run: |
          set -euo pipefail
          echo "Checking for required tools..."
          gh --version
          jq --version
          echo "✅ All dependencies are available."

      - name: "Step 1: Extract PR Information"
        id: pr-info
        run: |
          set -euo pipefail
          echo "🔍 Extracting PR information from workflow run..."
          
          PR_NUMBER="${{ github.event.workflow_run.pull_requests[0].number }}"
          if [ -z "$PR_NUMBER" ]; then
            echo "❌ ERROR: Could not find an associated PR number."
            exit 1
          fi
          echo "PR Number: $PR_NUMBER"
          
          echo "Fetching PR details using GitHub CLI..."
          PR_JSON=$(gh pr view "$PR_NUMBER" --json headRefOid,baseRefName)
          PR_HEAD_SHA=$(echo "$PR_JSON" | jq -r '.headRefOid')
          BASE_BRANCH=$(echo "$PR_JSON" | jq -r '.baseRefName')

          echo "PR Head SHA: $PR_HEAD_SHA"
          echo "Base Branch: $BASE_BRANCH"

          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "pr_head_sha=$PR_HEAD_SHA" >> $GITHUB_OUTPUT
          echo "base_branch=$BASE_BRANCH" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "Step 2: Observatory - Check Branch Protection Rules"
        id: observatory
        run: |
          set -euo pipefail
          echo "🔭 Observing PR #${{ steps.pr-info.outputs.pr_number }} for branch '${{ steps.pr-info.outputs.base_branch }}'..."
          
          echo "Fetching branch protection rules..."
          # 使用 --silent 标志来抑制 gh 在未找到保护规则时的非零退出码
          REQUIRED_CHECKS_JSON=$(gh api "repos/${{ github.repository }}/branches/${{ steps.pr-info.outputs.base_branch }}/protection" --jq '.required_status_checks.contexts' 2>/dev/null || echo "[]")
          
          # 使用 jq 检查返回的是否是数组以及是否为空
          if [[ "$(echo "$REQUIRED_CHECKS_JSON" | jq 'if type=="array" and length==0 then "empty" else "ok" end')" == '"empty"' ]]; then
            echo "✅ No required status checks found in branch protection rules. Gatekeeper passes by default."
            echo "observatory_passed=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          REQUIRED_CHECKS=$(echo "$REQUIRED_CHECKS_JSON" | jq -r '.[]')
          echo "Required checks according to branch protection rules:"
          echo "$REQUIRED_CHECKS"

          echo "Fetching actual check runs for commit: ${{ steps.pr-info.outputs.pr_head_sha }}"
          ALL_CHECKS_JSON=$(gh api "repos/${{ github.repository }}/commits/${{ steps.pr-info.outputs.pr_head_sha }}/check-runs" --jq '.check_runs')
          echo "Actual checks found on commit:"
          echo "$ALL_CHECKS_JSON" | jq '.[] | {name: .name, conclusion: .conclusion}'


          ALL_PASS=true
          while IFS= read -r CHECK_NAME; do
            CONCLUSION=$(echo "$ALL_CHECKS_JSON" | jq -r --arg name "$CHECK_NAME" '.[] | select(.name == $name) | .conclusion')
            
            if [[ "$CONCLUSION" == "success" ]]; then
              echo "✅ SUCCESS: Required check '$CHECK_NAME' passed."
            else
              echo "❌ FAILURE: Required check '$CHECK_NAME' did not pass. Status: '${CONCLUSION:-Not Run or Still Pending}'."
              ALL_PASS=false
            fi
          done <<< "$REQUIRED_CHECKS"
          
          if $ALL_PASS; then
            echo "Final Result: All required checks passed."
            echo "observatory_passed=true" >> $GITHUB_OUTPUT
          else
            echo "Final Result: One or more required checks failed or are pending."
            echo "observatory_passed=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: "Step 3: Get Dependabot Metadata"
        id: dependabot-metadata
        if: steps.observatory.outputs.observatory_passed == 'true'
        uses: dependabot/fetch-metadata@v2.2.0
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"

      - name: "Step 4: Handle Successful Checks (Non-Major Update)"
        if: >
          steps.observatory.outputs.observatory_passed == 'true' &&
          steps.dependabot-metadata.outputs.update-type != 'version-update:semver-major'
        run: |
          set -euo pipefail
          echo "✅ Observatory reports all checks passed for a non-major update."
          echo "Enabling auto-merge for PR #${{ steps.pr-info.outputs.pr_number }}..."
          gh pr merge "${{ steps.pr-info.outputs.pr_number }}" --auto --squash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: "Step 5: Handle Successful Checks (Major Update)"
        if: >
          steps.observatory.outputs.observatory_passed == 'true' &&
          steps.dependabot-metadata.outputs.update-type == 'version-update:semver-major'
        run: |
          set -euo pipefail
          echo "⚠️ Observatory reports all checks passed, but this is a major update."
          echo "Adding a comment to PR #${{ steps.pr-info.outputs.pr_number }} to request manual review."
          gh pr comment "${{ steps.pr-info.outputs.pr_number }}" --body "✅ The Observatory confirms all required branch protection checks have passed, but this is a **major** version update. It requires manual review and approval."
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "Step 6: Handle Failed Checks"
        if: steps.observatory.outputs.observatory_passed == 'false'
        run: |
          set -euo pipefail
          echo "❌ Observatory reports one or more required checks failed or are pending."
          echo "Closing PR #${{ steps.pr-info.outputs.pr_number }}..."
          WORKFLOW_URL="https://github.com/${{ github.repository }}/pull/${{ steps.pr-info.outputs.pr_number }}/checks"
          COMMENT_BODY="🚨 The Observatory reports that one or more **required branch protection checks** have failed or are still pending. I am closing this PR automatically.\n\nPlease review the full list of checks and their logs here: **[All PR Checks](${WORKFLOW_URL})**."
          gh pr comment "${{ steps.pr-info.outputs.pr_number }}" --body "$COMMENT_BODY"
          gh pr close "${{ steps.pr-info.outputs.pr_number }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}